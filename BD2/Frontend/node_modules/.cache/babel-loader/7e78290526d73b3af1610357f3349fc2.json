{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.makeNode = makeNode;\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar defaultNode = function defaultNode() {\n  return {\n    api: {\n      preValidate: _utils2.default.noop,\n      validate: _utils2.default.noop,\n      asyncValidate: _utils2.default.noop\n    },\n    children: {},\n    getProps: function getProps() {\n      return {};\n    }\n  };\n};\n\nfunction makeNode() {\n  var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _extends({}, defaultNode(), node);\n}\n\nvar Tree = function () {\n  function Tree(rootNode) {\n    _classCallCheck(this, Tree);\n\n    this.root = makeNode(rootNode);\n  }\n\n  _createClass(Tree, [{\n    key: 'addNode',\n    value: function addNode(node) {\n      var parent = this.root; // Step 1: Break the nodes field into parts\n\n      var path = _utils2.default.makePathArray(node.fullField); // Step 2: Go down the tree\n\n\n      while (path.length > 1) {\n        // Ensure a linkage node is preset\n        if (!parent.children[path[0]]) {\n          parent.children[path[0]] = makeNode({\n            nested: true,\n            field: path[0],\n            fullField: _utils2.default.makePathArray([parent.fullField, path[0]]),\n            parent: parent\n          });\n        } // Child grows up, becomes the new parent\n\n\n        parent = parent.children[path[0]];\n        path.shift();\n      } // Create the last node in the chain\n\n\n      var newNode = makeNode(_extends({}, node, {\n        field: path[0],\n        parent: parent\n      }));\n      parent.children[path[0]] = newNode;\n    }\n  }, {\n    key: 'removeNode',\n    value: function removeNode(node) {\n      var parent = this.root; // Step 1: Break the nodes field into parts\n\n      var path = _utils2.default.makePathArray(node.fullField); // Step 2: Go down the tree\n\n\n      while (path.length > 1) {\n        // Bail out if the child field doesn't exist\n        if (!parent.children[path[0]]) {\n          return;\n        } // Child grows up, becomes the new parent\n\n\n        parent = parent.children[path[0]];\n        path.shift();\n      } // Create the last node in the chain\n\n\n      delete parent.children[path[0]];\n    }\n  }, {\n    key: 'getNodeByField',\n    value: function getNodeByField(field) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          closest = _ref.closest; // Initialize the parent to the target\n\n\n      var parent = this.root; // Step 1: Break the nodes field into parts\n\n      var path = _utils2.default.makePathArray(field); // Step 2: Go down the tree\n\n\n      while (path.length) {\n        if (parent.children && parent.children[path[0]]) {\n          parent = parent.children[path[0]];\n        } else {\n          return closest ? parent : null;\n        }\n\n        path.shift();\n      }\n\n      return parent;\n    }\n  }]);\n\n  return Tree;\n}();\n\nexports.default = Tree;","map":null,"metadata":{},"sourceType":"script"}