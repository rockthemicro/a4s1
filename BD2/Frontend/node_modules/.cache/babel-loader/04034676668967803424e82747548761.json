{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validationSuccess = exports.validationFailure = exports.doneValidatingField = exports.validatingField = exports.submitting = exports.submits = exports.submitted = exports.submit = exports.clearAll = exports.resetAll = exports.reset = exports.setAllTouched = exports.setTouched = exports.setAsyncSuccess = exports.setAsyncWarning = exports.setAsyncError = exports.setSuccess = exports.setWarning = exports.setError = exports.format = exports.setAllValues = exports.setValue = exports.setFormState = exports.VALIDATION_SUCCESS = exports.VALIDATION_FAILURE = exports.DONE_VALIDATING_FIELD = exports.VALIDATING_FIELD = exports.SUBMITTING = exports.SUBMITS = exports.SUBMITTED = exports.SUBMIT = exports.CLEAR_ALL = exports.RESET_ALL = exports.RESET = exports.SET_ALL_TOUCHED = exports.SET_TOUCHED = exports.SET_ASYNC_SUCCESS = exports.SET_ASYNC_WARNING = exports.SET_ASYNC_ERROR = exports.SET_SUCCESS = exports.SET_WARNING = exports.SET_ERROR = exports.FORMAT = exports.SET_ALL_VALUES = exports.SET_VALUE = exports.SET_FORM_STATE = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nexports.preValidate = preValidate;\nexports.validate = validate;\nexports.asyncValidate = asyncValidate;\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nvar makeAction = function makeAction(type) {\n  return function (payload) {\n    return {\n      type: type,\n      payload: payload\n    };\n  };\n};\n\nvar SET_FORM_STATE = exports.SET_FORM_STATE = 'SET_FORM_STATE';\nvar SET_VALUE = exports.SET_VALUE = 'SET_VALUE';\nvar SET_ALL_VALUES = exports.SET_ALL_VALUES = 'SET_ALL_VALUES';\nvar FORMAT = exports.FORMAT = 'FORMAT';\nvar SET_ERROR = exports.SET_ERROR = 'SET_ERROR';\nvar SET_WARNING = exports.SET_WARNING = 'SET_WARNING';\nvar SET_SUCCESS = exports.SET_SUCCESS = 'SET_SUCCESS';\nvar SET_ASYNC_ERROR = exports.SET_ASYNC_ERROR = 'SET_ASYNC_ERROR';\nvar SET_ASYNC_WARNING = exports.SET_ASYNC_WARNING = 'SET_ASYNC_WARNING';\nvar SET_ASYNC_SUCCESS = exports.SET_ASYNC_SUCCESS = 'SET_ASYNC_SUCCESS';\nvar SET_TOUCHED = exports.SET_TOUCHED = 'SET_TOUCHED';\nvar SET_ALL_TOUCHED = exports.SET_ALL_TOUCHED = 'SET_ALL_TOUCHED';\nvar RESET = exports.RESET = 'RESET';\nvar RESET_ALL = exports.RESET_ALL = 'RESET_ALL';\nvar CLEAR_ALL = exports.CLEAR_ALL = 'CLEAR_ALL';\nvar SUBMIT = exports.SUBMIT = 'SUBMIT';\nvar SUBMITTED = exports.SUBMITTED = 'SUBMITTED';\nvar SUBMITS = exports.SUBMITS = 'SUBMITS';\nvar SUBMITTING = exports.SUBMITTING = 'SUBMITTING';\nvar VALIDATING_FIELD = exports.VALIDATING_FIELD = 'VALIDATING_FIELD';\nvar DONE_VALIDATING_FIELD = exports.DONE_VALIDATING_FIELD = 'DONE_VALIDATING_FIELD';\nvar VALIDATION_FAILURE = exports.VALIDATION_FAILURE = 'VALIDATION_FAILURE';\nvar VALIDATION_SUCCESS = exports.VALIDATION_SUCCESS = 'VALIDATION_SUCCESS';\nvar setFormState = exports.setFormState = makeAction(SET_FORM_STATE);\nvar setValue = exports.setValue = makeAction(SET_VALUE);\nvar setAllValues = exports.setAllValues = makeAction(SET_ALL_VALUES);\nvar format = exports.format = makeAction(FORMAT);\nvar setError = exports.setError = makeAction(SET_ERROR);\nvar setWarning = exports.setWarning = makeAction(SET_WARNING);\nvar setSuccess = exports.setSuccess = makeAction(SET_SUCCESS);\nvar setAsyncError = exports.setAsyncError = makeAction(SET_ASYNC_ERROR);\nvar setAsyncWarning = exports.setAsyncWarning = makeAction(SET_ASYNC_WARNING);\nvar setAsyncSuccess = exports.setAsyncSuccess = makeAction(SET_ASYNC_SUCCESS);\nvar setTouched = exports.setTouched = makeAction(SET_TOUCHED);\nvar setAllTouched = exports.setAllTouched = makeAction(SET_ALL_TOUCHED);\nvar reset = exports.reset = makeAction(RESET);\nvar resetAll = exports.resetAll = makeAction(RESET_ALL);\nvar clearAll = exports.clearAll = makeAction(CLEAR_ALL);\nvar submit = exports.submit = makeAction(SUBMIT);\nvar submitted = exports.submitted = makeAction(SUBMITTED);\nvar submits = exports.submits = makeAction(SUBMITS);\nvar submitting = exports.submitting = makeAction(SUBMITTING);\nvar validatingField = exports.validatingField = makeAction(VALIDATING_FIELD);\nvar doneValidatingField = exports.doneValidatingField = makeAction(DONE_VALIDATING_FIELD);\nvar validationFailure = exports.validationFailure = makeAction(VALIDATION_FAILURE);\nvar validationSuccess = exports.validationSuccess = makeAction(VALIDATION_SUCCESS);\n\nfunction preValidate(_ref) {\n  var field = _ref.field,\n      validator = _ref.validator;\n  return function (dispatch, getState) {\n    if (validator && validator !== _utils2.default.noop) {\n      // Call the validation function\n      var result = validator(_utils2.default.get(getState().values, field));\n\n      if (typeof result === 'undefined') {\n        console.info('You have returned undefined from preValidate for the field: ' + field.toString() + '. If this was intentional, disregard this message.');\n      }\n\n      dispatch(setValue({\n        field: field,\n        value: result\n      }));\n    }\n  };\n}\n\nfunction validate(_ref2) {\n  var field = _ref2.field,\n      validator = _ref2.validator;\n  return function (dispatch, getState) {\n    if (!validator || validator === _utils2.default.noop) {\n      return;\n    } // Call the validation function and clean the result\n\n\n    var result = validator(_utils2.default.get(getState().values, field));\n\n    var recurse = function recurse(current, path) {\n      // Normalize fieldPath\n      path = _utils2.default.makePathArray(path); // If it's a non object/array, treat it as an error\n\n      if (!_utils2.default.isObject(current) && !_utils2.default.isArray(current)) {\n        // Nested errors aren't allowed if using string errors, so return\n        return dispatch(setError({\n          field: path,\n          value: current\n        }));\n      } // If it's an error object, set a clean slate\n\n\n      if (current.error || current.warning || current.success) {\n        dispatch(setError({\n          field: path,\n          value: false\n        }));\n        dispatch(setWarning({\n          field: path,\n          value: false\n        }));\n        dispatch(setSuccess({\n          field: path,\n          value: false\n        })); // Now handle accordingly\n\n        if (current.error) {\n          dispatch(setError({\n            field: path,\n            value: current.error\n          }));\n        }\n\n        if (current.warning) {\n          dispatch(setWarning({\n            field: path,\n            value: current.warning\n          }));\n        }\n\n        if (current.success) {\n          dispatch(setSuccess({\n            field: path,\n            value: current.success\n          }));\n        }\n\n        return;\n      } // If result is an array, recurse into each item\n\n\n      if (_utils2.default.isArray(current)) {\n        return current.map(function (subResult, i) {\n          return recurse(subResult, [path, i]);\n        });\n      } // It must be a normal object, recurse on each key to set nested errors!\n\n\n      _utils2.default.mapObject(current, function (subResult, key) {\n        return recurse(subResult, [path, key]);\n      });\n    }; // Recurse to set all errors\n\n\n    recurse(result, field);\n    return _utils2.default.cleanError(result, {\n      removeSuccess: true\n    });\n  };\n}\n\nfunction asyncValidate(_ref3) {\n  var _this = this;\n\n  var field = _ref3.field,\n      validator = _ref3.validator,\n      validationPromiseIDs = _ref3.validationPromiseIDs;\n  return function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee(dispatch, getState) {\n      var fieldPathArray, uid, result, recurse;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!validator || validator === _utils2.default.noop)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 2:\n              // We are validating the specified field\n              dispatch(validatingField(field));\n              fieldPathArray = _utils2.default.makePathArray(field).join('.'); // Set up an autoincrementing promise UID for this field on the form\n\n              uid = (validationPromiseIDs.get(fieldPathArray) || 0) + 1;\n              validationPromiseIDs.set(fieldPathArray, uid);\n              result = void 0;\n              _context.prev = 7;\n              _context.next = 10;\n              return validator(_utils2.default.get(getState().values, field));\n\n            case 10:\n              result = _context.sent;\n\n              if (!(validationPromiseIDs.get(fieldPathArray) !== uid)) {\n                _context.next = 13;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 13:\n              // Set up the error recursion\n              recurse = function recurse(current, path) {\n                // Normalize fieldPath\n                path = _utils2.default.makePathArray(path); // If it's a non object/array, treat it as an error\n\n                if (!_utils2.default.isObject(current) && !_utils2.default.isArray(current)) {\n                  // Nested errors aren't allowed if using string errors, so return\n                  return dispatch(setAsyncError({\n                    field: path,\n                    value: current\n                  }));\n                } // If it's an error object, respond accordingly\n\n\n                if (current.error || current.warning || current.success) {\n                  dispatch(setAsyncError({\n                    field: path,\n                    value: false\n                  }));\n                  dispatch(setAsyncWarning({\n                    field: path,\n                    value: false\n                  }));\n                  dispatch(setAsyncSuccess({\n                    field: path,\n                    value: false\n                  }));\n\n                  if (current.error) {\n                    dispatch(setAsyncError({\n                      field: path,\n                      value: current.error\n                    }));\n                  }\n\n                  if (current.warning) {\n                    dispatch(setAsyncWarning({\n                      field: path,\n                      value: current.warning\n                    }));\n                  }\n\n                  if (current.success) {\n                    dispatch(setAsyncSuccess({\n                      field: path,\n                      value: current.success\n                    }));\n                  }\n\n                  return;\n                } // If result is an array, recurse into each item\n\n\n                if (_utils2.default.isArray(current)) {\n                  return current.map(function (subResult, i) {\n                    return recurse(subResult, [path, i]);\n                  });\n                } // It must be a normal object, recurse on each key to set nested errors!\n\n\n                _utils2.default.mapObject(current, function (subResult, key) {\n                  return recurse(subResult, [path, key]);\n                });\n              }; // Handle the error\n\n\n              recurse(result, field); // We successfully validated so dispatch\n\n              dispatch(validationSuccess(field));\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context['catch'](7); // An validation error happened!\n              // Set the error result to true to stop further validation up the chain\n\n              result = true;\n              dispatch(validationFailure({\n                field: field,\n                value: _context.t0\n              }));\n\n            case 22:\n              // Mark the field as done validating\n              dispatch(doneValidatingField(field));\n              return _context.abrupt('return', _utils2.default.cleanError(result, {\n                removeSuccess: true\n              }));\n\n            case 24:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this, [[7, 18]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}","map":null,"metadata":{},"sourceType":"script"}