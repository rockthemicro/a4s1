{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reduxThunk = require('redux-thunk');\n\nvar _reduxThunk2 = _interopRequireDefault(_reduxThunk);\n\nvar _redux = require('redux');\n\nvar _reactRedux = require('react-redux');\n\nvar _BuildReducer = require('../redux/BuildReducer');\n\nvar _BuildReducer2 = _interopRequireDefault(_BuildReducer);\n\nvar _actions = require('../redux/actions');\n\nvar actions = _interopRequireWildcard(_actions);\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _Tree = require('../utils/Tree');\n\nvar _Tree2 = _interopRequireDefault(_Tree);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* ---------------------------- Helper Methods ----------------------------- */\n\n/* ----- Recursive Check to see if form is valid  ----- */\n\n\nvar isInvalid = function isInvalid(errors) {\n  if (Array.isArray(errors)) {\n    return errors.some(function (k) {\n      return isInvalid(k);\n    });\n  } else if (errors !== null && (typeof errors === 'undefined' ? 'undefined' : _typeof(errors)) === 'object') {\n    return Object.keys(errors).some(function (k) {\n      return isInvalid(errors[k]);\n    });\n  }\n\n  return errors;\n};\n/* -------------- Generates a new state ------------- */\n// TODO figure out way to make state immutable\n\n\nvar newState = function newState(state) {\n  return JSON.parse(JSON.stringify(state));\n};\n/* ----------------- Form Component ---------------- */\n\n\nvar Form = function (_Component) {\n  _inherits(Form, _Component);\n\n  function Form(props) {\n    var _this2 = this;\n\n    _classCallCheck(this, Form);\n\n    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));\n\n    _this.getFormState = function () {\n      return newState(_this.props.formState);\n    };\n\n    _this.recurseUpFromNode = function (field, cb, isAsync) {\n      // Find the node using the field\n      var target = _this.tree.getNodeByField(field, {\n        closest: true\n      }); // If there is no target at all, stop\n\n\n      if (!target) {\n        return;\n      }\n\n      var stopped = false;\n\n      var stop = function stop() {\n        stopped = true;\n      }; // Define recur function\n\n\n      var recurse = isAsync ? function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee(node) {\n          return _regenerator2.default.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return cb(node, stop);\n\n                case 2:\n                  // If we have parent recur up\n                  if (!stopped && node.parent) {\n                    recurse(node.parent);\n                  }\n\n                case 3:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this2);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }() : function (node) {\n        // Call the cb with the node\n        cb(node, stop); // If we have parent recur up\n\n        if (!stopped && node.parent) {\n          recurse(node.parent);\n        }\n      }; // start recursion from the target\n\n      try {\n        return recurse(target);\n      } catch (err) {\n        throw err;\n      }\n    };\n\n    _this.recurseUpAllNodes = function (cb) {\n      // Define recurse function\n      var recurse = function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee2(node, parentStop) {\n          var stopped, stop;\n          return _regenerator2.default.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  stopped = false;\n\n                  stop = function stop() {\n                    stopped = true;\n                  }; // If we have children recurse down\n\n\n                  if (!node.children) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  _context2.next = 5;\n                  return Promise.all(_utils2.default.mapObject(node.children, function (d) {\n                    return recurse(d, stop);\n                  }));\n\n                case 5:\n                  if (!stopped) {\n                    _context2.next = 9;\n                    break;\n                  } // If stopped, propagate up\n\n\n                  parentStop();\n                  _context2.next = 11;\n                  break;\n\n                case 9:\n                  _context2.next = 11;\n                  return cb(node, parentStop);\n\n                case 11:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this2);\n        }));\n\n        return function recurse(_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }(); // start recursion from the target\n\n\n      return recurse(_this.node, function () {});\n    };\n\n    _this.getFieldProps = function (field) {\n      var node = field ? _this.tree.getNodeByField(field) || (0, _Tree.makeNode)() : _this.node;\n      return node.getProps();\n    };\n\n    _this.getNodeByField = function (field) {\n      var node = _this.tree.getNodeByField(field);\n\n      return node;\n    };\n\n    _this.setValue = function (field, value) {\n      _this.props.dispatch(actions.setValue({\n        field: field,\n        value: value\n      })); // Validate up the tree\n\n\n      _this.validateUpFromNode(field);\n    };\n\n    _this.setTouched = function (field) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      _this.props.dispatch(actions.setTouched({\n        field: field,\n        value: value\n      })); // Validate up the tree\n\n\n      _this.validateUpFromNode(field);\n    };\n\n    _this.setError = function (field, value) {\n      _this.props.dispatch(actions.setError({\n        field: field,\n        value: value\n      }));\n    };\n\n    _this.setWarning = function (field, value) {\n      _this.props.dispatch(actions.setWarning({\n        field: field,\n        value: value\n      }));\n    };\n\n    _this.setSuccess = function (field, value) {\n      _this.props.dispatch(actions.setSuccess({\n        field: field,\n        value: value\n      }));\n    };\n\n    _this.preValidate = function (field) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Get the preValidate prop from the field node\n\n      var _this$getFieldProps = _this.getFieldProps(field),\n          preValidate = _this$getFieldProps.preValidate,\n          validateOnSubmit = _this$getFieldProps.validateOnSubmit;\n\n      if (preValidate === _utils2.default.noop || !opts.submitting && (_this.props.validateOnSubmit || validateOnSubmit)) {\n        return;\n      }\n\n      _this.props.dispatch(actions.preValidate({\n        field: field,\n        validator: preValidate\n      }));\n    };\n\n    _this.validate = function (field) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Get the validate prop from the field node\n\n      var _this$getFieldProps2 = _this.getFieldProps(field),\n          validate = _this$getFieldProps2.validate,\n          validateOnSubmit = _this$getFieldProps2.validateOnSubmit;\n\n      if (validate === _utils2.default.noop || !opts.submitting && (_this.props.validateOnSubmit || validateOnSubmit)) {\n        return;\n      }\n\n      return _this.props.dispatch(actions.validate({\n        field: field,\n        validator: validate\n      }));\n    };\n\n    _this.asyncValidate = function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee3(field) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var _this$getFieldProps3, asyncValidate, validateOnSubmit;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Get the asyncValidate prop from the field node\n                _this$getFieldProps3 = _this.getFieldProps(field), asyncValidate = _this$getFieldProps3.asyncValidate, validateOnSubmit = _this$getFieldProps3.validateOnSubmit;\n\n                if (!(asyncValidate === _utils2.default.noop || !opts.submitting && (_this.props.validateOnSubmit || validateOnSubmit))) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt('return');\n\n              case 3:\n                return _context3.abrupt('return', _this.props.dispatch(actions.asyncValidate({\n                  field: field,\n                  validator: asyncValidate,\n                  validationPromiseIDs: _this.validationPromiseIDs\n                })));\n\n              case 4:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, _this2);\n      }));\n\n      return function (_x7) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.validateUpFromNode = function (field) {\n      // comboValidate all fields up from the node\n      _this.recurseUpFromNode(field, function (node) {\n        return node.api.preValidate();\n      });\n\n      _this.recurseUpFromNode(field, function (node, stop) {\n        // If a validation causes an error, stop all parent validation\n        if (node.api.validate()) {\n          stop();\n        }\n      });\n\n      _this.recurseUpFromNode(field, function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee4(node, stop) {\n          return _regenerator2.default.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return node.api.asyncValidate();\n\n                case 2:\n                  if (!_context4.sent) {\n                    _context4.next = 4;\n                    break;\n                  }\n\n                  stop();\n\n                case 4:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, _this2);\n        }));\n\n        return function (_x9, _x10) {\n          return _ref4.apply(this, arguments);\n        };\n      }(), true);\n    };\n\n    _this.setAllValues = function () {\n      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _this.props.dispatch(actions.setAllValues(_extends({}, _this.props.defaultValues, values)));\n    };\n\n    _this.setAllTouched = _asyncToGenerator(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee5() {\n      var touched;\n      return _regenerator2.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              touched = {}; // Set touched is unique because we dont want to set touched on nested fields\n              // We also dont want to call the internal setTouched because that would\n              // Execute validation.\n\n              _context5.next = 3;\n              return _this.recurseUpAllNodes(function (node) {\n                if (node.nested) {\n                  return;\n                }\n\n                if (node.fullField) {\n                  touched = _utils2.default.set(touched, node.fullField, true);\n                }\n              });\n\n            case 3:\n              _this.props.dispatch(actions.setAllTouched(touched));\n\n            case 4:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, _this2);\n    }));\n\n    _this.preValidateAll = function () {\n      _this.recurseUpAllNodes(function (node) {\n        if (node.api.preValidate) {\n          node.api.preValidate({\n            submitting: true\n          });\n        }\n      });\n    };\n\n    _this.validateAll = function () {\n      return _this.recurseUpAllNodes(function (node, stop) {\n        if (node.api.validate) {\n          // Stop all parent validation if error is encountered\n          if (node.api.validate({\n            submitting: true\n          })) {\n            stop();\n          }\n        }\n      });\n    };\n\n    _this.asyncValidateAll = function () {\n      return _this.recurseUpAllNodes(function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regenerator2.default.mark(function _callee6(node, stop) {\n          return _regenerator2.default.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  if (!node.api.asyncValidate) {\n                    _context6.next = 5;\n                    break;\n                  }\n\n                  _context6.next = 3;\n                  return node.api.asyncValidate({\n                    submitting: true\n                  });\n\n                case 3:\n                  if (!_context6.sent) {\n                    _context6.next = 5;\n                    break;\n                  }\n\n                  stop();\n\n                case 5:\n                case 'end':\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, _this2);\n        }));\n\n        return function (_x12, _x13) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    };\n\n    _this.setFormState = function (formState) {\n      _this.props.dispatch(actions.setFormState(formState));\n    };\n\n    _this.getTouched = function (field) {\n      return _utils2.default.get(_this.props.formState.touched, field);\n    };\n\n    _this.getValue = function (field) {\n      return _utils2.default.get(_this.props.formState.values, field);\n    };\n\n    _this.getError = function (field) {\n      return _utils2.default.get(_this.props.formState.errors, field);\n    };\n\n    _this.getWarning = function (field) {\n      return _utils2.default.get(_this.props.formState.warnings, field);\n    };\n\n    _this.getSuccess = function (field) {\n      return _utils2.default.get(_this.props.formState.successes, field);\n    };\n\n    _this.getFullField = function (field) {\n      return field;\n    };\n\n    _this.addValue = function (field, value) {\n      _this.props.dispatch(actions.setValue({\n        field: field,\n        value: [].concat(_toConsumableArray(_utils2.default.get(_this.props.formState.values, field) || []), [value])\n      }));\n    };\n\n    _this.removeValue = function (field, index) {\n      [{\n        attribute: 'values',\n        action: 'setValue'\n      }, {\n        attribute: 'touched',\n        action: 'setTouched'\n      }, {\n        attribute: 'errors',\n        action: 'setError'\n      }].forEach(function (_ref7) {\n        var attribute = _ref7.attribute,\n            action = _ref7.action;\n        var fieldAttribute = _utils2.default.get(_this.props.formState[attribute], field) || [];\n\n        _this.props.dispatch(actions[action]({\n          field: field,\n          value: [].concat(_toConsumableArray(fieldAttribute.slice(0, index)), _toConsumableArray(fieldAttribute.slice(index + 1)))\n        }));\n      });\n    };\n\n    _this.swapValues = function (field, index, destIndex) {\n      var min = Math.min(index, destIndex);\n      var max = Math.max(index, destIndex);\n      var fieldValues = _utils2.default.get(_this.props.formState.values, field) || [];\n\n      _this.props.dispatch(actions.setValue({\n        field: field,\n        value: [].concat(_toConsumableArray(fieldValues.slice(0, min)), [fieldValues[max]], _toConsumableArray(fieldValues.slice(min + 1, max)), [fieldValues[min]], _toConsumableArray(fieldValues.slice(max + 1)))\n      }));\n    };\n\n    _this.register = function (node) {\n      return _this.tree.addNode(node);\n    };\n\n    _this.deregister = function (node) {\n      _this.tree.removeNode(node);\n    };\n\n    _this.reset = function (field) {\n      _this.props.dispatch(actions.reset({\n        field: field\n      }));\n    };\n\n    _this.resetAll = function () {\n      _this.props.dispatch(actions.resetAll());\n    };\n\n    _this.clearAll = function () {\n      _this.props.dispatch(actions.clearAll());\n    };\n\n    _this.preSubmit = function () {\n      var _ref8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee7(values) {\n        var newValues;\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                newValues = _utils2.default.clone(values);\n                _context7.next = 3;\n                return _this.recurseUpAllNodes(function (node) {\n                  var _node$getProps = node.getProps(),\n                      preSubmit = _node$getProps.preSubmit;\n\n                  if (preSubmit) {\n                    _utils2.default.set(newValues, node.fullField, preSubmit(_utils2.default.get(newValues, node.fullField)));\n                  }\n                });\n\n              case 3:\n                return _context7.abrupt('return', newValues);\n\n              case 4:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, _this2);\n      }));\n\n      return function (_x14) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    _this.submitForm = function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee8(e) {\n        var _this$props$formState, _errors, _asyncErrors, _invalid, _this$props$formState2, errors, asyncErrors, invalid, asyncInvalid, values;\n\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _this.props.dispatch(actions.submitting(true));\n\n                _this.props.dispatch(actions.submits());\n\n                _this.setAllTouched();\n\n                _this.preValidateAll();\n\n                _this.validateAll(); // We prevent default, by default, unless override is passed\n\n\n                if (e && e.preventDefault && _this.props.preventDefault) {\n                  e.preventDefault(e);\n                } // We need to prevent default if override is passed and form is invalid\n\n\n                if (!_this.props.preventDefault) {\n                  // Pull off errors from form state\n                  _this$props$formState = _this.props.formState, _errors = _this$props$formState.errors, _asyncErrors = _this$props$formState.asyncErrors; // Check to see if its invalid\n\n                  _invalid = isInvalid(_errors) || isInvalid(_asyncErrors); // Prevent default becaues form is invalid\n\n                  if (_invalid && e && e.preventDefault) {\n                    e.preventDefault(e);\n                  }\n                } // Call asynchronous validators\n\n\n                _context8.prev = 7;\n                _context8.next = 10;\n                return _this.asyncValidateAll();\n\n              case 10:\n                _context8.next = 16;\n                break;\n\n              case 12:\n                _context8.prev = 12;\n                _context8.t0 = _context8['catch'](7); // Let the user know we are done submitting\n\n                _this.props.dispatch(actions.submitting(false));\n\n                throw _context8.t0;\n\n              case 16:\n                // Pull off errors from form state\n                _this$props$formState2 = _this.props.formState, errors = _this$props$formState2.errors, asyncErrors = _this$props$formState2.asyncErrors; // Only submit if we have no errors\n\n                invalid = isInvalid(errors);\n                asyncInvalid = isInvalid(asyncErrors); // Call on validation fail if we are invalid\n\n                if ((invalid || asyncInvalid) && _this.props.onSubmitFailure) {\n                  _this.props.onSubmitFailure(errors, null, _this.getFormApi());\n                } // Only update submitted if we are not invalid\n                // And there are no active asynchronous validations\n\n\n                if (!(!(invalid || asyncInvalid) && _this.props.formState.asyncValidations === 0)) {\n                  _context8.next = 39;\n                  break;\n                }\n\n                values = JSON.parse(JSON.stringify(_this.props.formState.values)); // Call pre submit\n\n                _context8.next = 24;\n                return _this.preSubmit(values);\n\n              case 24:\n                values = _context8.sent; // Update submitted\n\n                _this.props.dispatch(actions.submitted()); // If onSubmit was passed then call it\n\n\n                if (!_this.props.onSubmit) {\n                  _context8.next = 39;\n                  break;\n                }\n\n                _context8.prev = 27;\n                _context8.next = 30;\n                return _this.props.onSubmit(values, e, _this.getFormApi());\n\n              case 30:\n                _context8.next = 39;\n                break;\n\n              case 32:\n                _context8.prev = 32;\n                _context8.t1 = _context8['catch'](27);\n\n                if (!_this.props.onSubmitFailure) {\n                  _context8.next = 38;\n                  break;\n                }\n\n                _this.props.onSubmitFailure({}, _context8.t1, _this.getFormApi());\n\n                _context8.next = 39;\n                break;\n\n              case 38:\n                throw _context8.t1;\n\n              case 39:\n                // Let the user know we are done submitting\n                _this.props.dispatch(actions.submitting(false));\n\n              case 40:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, _this2, [[7, 12], [27, 32]]);\n      }));\n\n      return function (_x15) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    _this.tree = new _Tree2.default({\n      nested: true,\n      children: {},\n      api: _extends({}, _this.getFormApi(), {\n        validate: function validate(opts) {\n          return _this.validate(undefined, opts);\n        },\n        preValidate: function preValidate(opts) {\n          return _this.preValidate(undefined, opts);\n        },\n        asyncValidate: function asyncValidate(opts) {\n          return _this.asyncValidate(undefined, opts);\n        }\n      }),\n      getProps: function getProps() {\n        return _this.props;\n      }\n    });\n    _this.node = _this.tree.root;\n    _this.validationPromiseIDs = new Map();\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        formApi: this.getFormApi(),\n        formState: this.getFormState(),\n        formProps: this.props\n      };\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      if (this.props.getApi) {\n        this.props.getApi(this.getFormApi());\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.validateOnMount) {\n        this.preValidateAll();\n        this.validateAll();\n        this.asyncValidateAll();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var didUpdate = !_utils2.default.isDeepEqual(nextProps.formState, this.props.formState);\n\n      if (this.props.onChange && didUpdate) {\n        this.props.onChange(newState(nextProps.formState), this.getFormApi());\n      }\n\n      if (!_utils2.default.isDeepEqual(nextProps.values, this.props.values)) {\n        this.setAllValues(nextProps.values);\n      }\n    }\n  }, {\n    key: 'getFormApi',\n    value: function getFormApi() {\n      return {\n        submitForm: this.submitForm,\n        setValue: this.setValue,\n        getValue: this.getValue,\n        setTouched: this.setTouched,\n        getTouched: this.getTouched,\n        getWarning: this.getWarning,\n        getError: this.getError,\n        getSuccess: this.getSuccess,\n        getFormState: this.getFormState,\n        setFormState: this.setFormState,\n        setError: this.setError,\n        setWarning: this.setWarning,\n        setSuccess: this.setSuccess,\n        resetAll: this.resetAll,\n        reset: this.reset,\n        clearAll: this.clearAll,\n        addValue: this.addValue,\n        removeValue: this.removeValue,\n        setAllValues: this.setAllValues,\n        setAllTouched: this.setAllTouched,\n        swapValues: this.swapValues,\n        register: this.register,\n        deregister: this.deregister,\n        asyncValidate: this.asyncValidate,\n        validate: this.validate,\n        preValidate: this.preValidate,\n        getFullField: this.getFullField,\n        getNodeByField: this.getNodeByField\n      };\n    } // Utils\n    // Public Api\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          component = _props.component,\n          render = _props.render;\n      var formApi = this.getFormApi();\n      var formState = this.getFormState();\n\n      var inlineProps = _extends({}, formApi, formState);\n\n      var componentProps = {\n        formApi: _extends({}, formApi, formState)\n      };\n\n      if (component) {\n        return _react2.default.createElement(component, componentProps, children);\n      }\n\n      if (render) {\n        return render(inlineProps);\n      }\n\n      if (typeof children === 'function') {\n        return children(inlineProps);\n      }\n\n      return children;\n    }\n  }]);\n\n  return Form;\n}(_react.Component);\n\nForm.childContextTypes = {\n  formApi: _propTypes2.default.object,\n  formState: _propTypes2.default.object,\n  formProps: _propTypes2.default.object\n};\nForm.defaultProps = {\n  pure: true,\n  preventDefault: true,\n  defaultValues: {}\n  /* ---------- Container ---------- */\n\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    formState: state\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  };\n};\n\nvar FormContainer = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Form);\n/* ---------- Exports ---------- */\n\nvar ReactForm = function (_Component2) {\n  _inherits(ReactForm, _Component2);\n\n  function ReactForm(props) {\n    _classCallCheck(this, ReactForm);\n\n    var _this3 = _possibleConstructorReturn(this, (ReactForm.__proto__ || Object.getPrototypeOf(ReactForm)).call(this, props));\n\n    var defaultValues = props.defaultValues,\n        values = props.values;\n    _this3.store = (0, _redux.createStore)((0, _BuildReducer2.default)({\n      defaultValues: defaultValues,\n      values: values\n    }), (0, _redux.applyMiddleware)(_reduxThunk2.default // lets us dispatch() functions\n    // createLogger() // neat middleware that logs actions\n    ));\n    return _this3;\n  }\n\n  _createClass(ReactForm, [{\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          rest = _objectWithoutProperties(_props2, ['children']);\n\n      return _react2.default.createElement(FormContainer, _extends({\n        store: this.store\n      }, rest), children);\n    }\n  }]);\n\n  return ReactForm;\n}(_react.Component);\n\nexports.default = ReactForm;","map":null,"metadata":{},"sourceType":"script"}